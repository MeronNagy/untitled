name: 'publish nightly'

on:
  push:
    branches:
      - main
    paths:
      - '**/build.yml'
      - 'src/**'
      - 'src-tauri/**'
      - 'static/**'
  workflow_dispatch:

jobs:
  set-version:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.set-version.outputs.VERSION }}
    steps:
      - name: Generate timestamp version
        id: set-version
        run: |
          VERSION="nightly-$(date +'%Y%m%d%H%M%S')"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "$VERSION"

  publish-tauri:
    needs: set-version
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            name: 'macOS M1 and above'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            name: 'macOS Intel'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            name: 'Linux'
            args: ''
          - platform: 'windows-latest'
            name: 'Windows'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: install Linux dependencies
        if: matrix.name == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y lldb gcc-multilib libsecret-1-0 libsecret-1-dev libgtk-3-dev libsoup-3.0-dev libjavascriptcoregtk-4.1-dev libwebkit2gtk-4.1-dev libxdo-dev pkg-config

      - uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        run: pnpm install

      - run: echo "$VERSION"
        env:
          VERSION: ${{ needs.set-version.outputs.VERSION }}

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.set-version.outputs.VERSION }}
        with:
          tagName: "${{ env.VERSION }}"
          releaseName: "${{ env.VERSION }}"
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: true
          args: ${{ matrix.args }}
